BIRT for AWS Lambda

Lambda is provided by AWS as a way to execute code on demand in the cloud.  It's described in this earlier blog post: http://blog.innoventsolutions.com/innovent-solutions-blog/2017/10/quick-reporting-from-the-cloud-with-lambda-and-pentaho.html

I was recently tasked with coming up with a way to generate BIRT reports in a Lambda function similar to the Pentaho one described in the post. This article is a description of the various technical challenges I had to deal with to accomplish that.

If you look at tutorials and how-to articles on the web for creating a Lambda function for Java you'll find they all suggest you use Maven to build a "fat jar" using the shade plugin.  A fat jar is one where all the other jars that your project depends on on are unpacked and re-packed into one big jar that also contains your classes, hence the term "fat jar".  It's superficially a neat concept, but if you think about it you realize there are situations where this just won't work, such as where you have a collision of class names in unrelated jars or dependencies on two different versions of the same jar.  The solution to this is the "shading" process, which is where classes are renamed as necessary during the packing process. This is another superfically neat concept but, again, there are many situations where it won't work. One such situation is where you have exotic class loaders such as OSGI, which is used by BIRT.  This stack exchange question describes the pros and cons of shading well:  https://softwareengineering.stackexchange.com/questions/297276/what-is-a-shaded-java-dependency.

So, because of OSGI I couldn't pack all the BIRT dependencies into a fat jar.  Fortunately, Lambda will also accept a zip file containing the classes and all the dependencies in a lib folder.

Once I was committed to building a zip file I realized Maven was no longer required, but I wanted to use it anyway because it simplifies the build path.  However it looks like BIRT hasn't worked in Maven since version 4.4 so I created a repository in Maven Central which can be included with this dependency:

	<dependency>
		<groupId>com.innoventsolutions.birt.runtime</groupId>
		<artifactId>org.eclipse.birt.runtime_4.8.0-20180626</artifactId>
		<version>4.8.0</version>
	</dependency>

The scripts for building this repository are included in the project.

Once this dependency exists, and the project has the maven nature, eclipse will automatically build all the class files into the target folder.  I created a bash script that builds the zip file from these classes and all the dependencies from the .m2 folder.  Unfortunately this zip file was too big to upload directly but it could be uploaded to S3 and then transferred to the Lambda function.

S3 was needed anyway because the report design and resource files had to be stored somewhere and the output had to go somewhere and Lambda itself has a limited file system.  You can have up to 512 megabytes in the /tmp directory and it's not permanent.  I coded the report runner to copy the resource files from S3 to the /tmp directory before running the report and then copy the output file from /tmp back to S3 afterwords.  






